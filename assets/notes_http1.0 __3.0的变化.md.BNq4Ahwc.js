import{_ as t,c as a,o as e,a4 as h}from"./chunks/framework.Bn8BcnVb.js";const P=JSON.parse('{"title":"http1.0 =>3.0的变化","description":"","frontmatter":{"title":"http1.0 =>3.0的变化"},"headers":[],"relativePath":"notes/http1.0 =>3.0的变化.md","filePath":"notes/http1.0 =>3.0的变化.md"}'),i={name:"notes/http1.0 =>3.0的变化.md"},l=h('<h1 id="http1-0-3-0的变化" tabindex="-1">http1.0 =&gt;3.0的变化 <a class="header-anchor" href="#http1-0-3-0的变化" aria-label="Permalink to &quot;http1.0 =&gt;3.0的变化&quot;">​</a></h1><h2 id="http1-1" tabindex="-1">http1.1 <a class="header-anchor" href="#http1-1" aria-label="Permalink to &quot;http1.1&quot;">​</a></h2><ul><li>默认开启持久连接，即长连接keep-alive，允许在同一TCP请求上进行多个请求，减少了建立连接的次数，提高了性能</li><li>新的缓存头，使用cache-control替代expires强缓存，使用ETag替代Last-Modified协商缓存</li><li>新的方法，put、head、options等</li></ul><h2 id="http2-0" tabindex="-1">http2.0 <a class="header-anchor" href="#http2-0" aria-label="Permalink to &quot;http2.0&quot;">​</a></h2><ul><li>完全使用二进制协议，http请求以二进制帧分块数据包的方式传输，每个请求下的数据包携带请求ID构成数据流</li><li>通过分块数据包在http应用层上实现了多路复用，可以在同一TCP请求上同时发送多个http请求，大大提升了性能</li><li>使用hpack算法对http头进行压缩，生成http头的映射表存储头信息，对于相同的头不需要重复发送，提升了传输性能</li></ul><h2 id="http3-0" tabindex="-1">http3.0 <a class="header-anchor" href="#http3-0" aria-label="Permalink to &quot;http3.0&quot;">​</a></h2><ul><li>使用QUIC协议（基于UDP）替换TCP协议</li><li>真正实现了多路复用。http2.0的多路复用只作用在应用层下，在传输层仍然存在TCP的队列堵塞。QUIC协议基于UDP，不需要顺序传输和确认，可以快速重传丢失包，没有队列阻塞问题。</li><li>减少了握手事件和重传延迟</li></ul>',7),o=[l];function p(r,n,s,_,c,d){return e(),a("div",null,o)}const f=t(i,[["render",p]]);export{P as __pageData,f as default};
